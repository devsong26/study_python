"""
    Better way 8:리스트 컴프리헨션에서 표현식을 두 개 넘게 쓰지 말자

    리스트 컴프리헨션은 기본 사용법뿐만 아니라 다중 루프도 지원한다.
    예를 들어 행렬(다른 리스트를 담고 있는 리스트)을 모든 셀이 포함된 평평한
    리스트 하나로 간략화한다고 가정해보자. 다음은 for 표현식 두 개를 사용한
    리스트 컴프리헨션이다. 이 표현식은 왼쪽에서 오른쪽 순서로 실행된다.
"""
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flat = [x for row in matrix for x in row]
print(flat)
"""
    입력 리스트의 레이아웃을 두 레벨로 중복해서 구성
    예를 들어 2차원 행렬의 각 셀에 있는 값의 제곱을 구한다고 하자.
    이 표현식은 추가로 [] 문자를 사용하기 때문에 그리 좋아 보이진 않지만 
    그래도 이해하기는 쉽다.
"""
squared = [[x**2 for x in row] for row in matrix]
print(squared)
"""
    리스트 컴프리헨션도 다중 if 조건을 지원한다. 같은 루프 레벨에 여러 조건이 있으면
    암시적인 and 표현식이 된다.
"""
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [x for x in a if x > 4 if x % 2 == 0]
c = [x for x in a if x > 4 and x % 2 == 0]
assert b == c
"""
    조건은 루프의 각 레벨에서 for 표현식 뒤에 설정할 수 있다.
"""
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
filtered = [[x for x in row if x % 3 == 0]
            for row in matrix if sum(row) >= 10]
print(filtered)
"""
    리스트 컴프리헨션을 사용할 때는 표현식이 두 개를 넘어가면 피하는 게 좋다.
    조건 두 개, 루프 두 개, 혹은 조건 한 개와 루프 한 개 정도면 된다.
    이것보다 복잡해지면 일반적인 if 문과 for 문을 사용하고 
    헬퍼 함수(Better way 16 "리스트를 반환하는 대신 제너레이터를 고려하자" 참고)를 
    작성해야 한다.
"""