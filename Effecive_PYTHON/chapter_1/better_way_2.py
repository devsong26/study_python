"""
    Better way 2 PEP 8 스타일 가이드를 따르자

    화이트스페이스: 파이썬에서 화이트스페이스(공백)는 문법적으로 의미가 있다.
    파이썬 프로그래머는 특히 코드의 명료성 때문에 화이트스페이스의 영향에 민감한 편이다.
    - 탭이 아닌 스페이스로 들여쓴다.
    - 문법적으로 의미 있는 들여쓰기는 각 수준마다 스페이스 네 개를 사용한다.
    - 한 줄의 문자 길이가 79자 이하여야 한다.
    - 표현식이 길어서 다음 줄로 이어지면 일반적인 들여쓰기 수준에 추가로
    스페이스 네 개를 사용한다.
    - 파일에서 함수와 클래스는 빈 줄 두 개로 구분해야 한다.
    - 클래스에서 메서드는 빈 줄 하나로 구분해야 한다.
    - 리스트 인덱스, 함수 호출, 키워드 인수 할당에는 스페이스를 사용하지 않는다.
    - 변수 할당 앞뒤에 스페이스를 하나만 사용한다.

    명명: PEP 8은 언어의 부분별로 독자적인 명명 스타일을 제안한다.
    이 스타일을 따르면 코드를 읽을 때 각 이름에 대응하는 타입을 구별하기 쉽다.
    - 함수, 변수, 속성은 lowercase_underscore 형식을 따른다.
    - 보호 인스턴스 속성은 _leading_underscore 형식을 따른다.
    - 비공개 인스턴트 속성은 __double_leading_underscore 형식을 따른다.
    - 클래스와 예외는 CapitalizedWord 형식을 따른다.
    - 모듈 수준 상수는 ALL_CAPS 형식을 따른다.
    - 클래스의 인스턴스 메서드에서는 첫 번째 파라미터(해당 객체를 참조)의 이름을
    self로 지정한다.
    - 클래스 메서드에서는 첫 번째 파라미터(해당 클래스를 참조)의 이름을 cls로
    지정한다.

    표현식과 문장: 파이썬의 계명에는 "어떤 일을 하는 확실한 방법이 (될 수 있으면
    하나만) 있어야 한다."는 표현이 있다. PEP 8은 표현식과 문장의 본보기로 이 스타일을
    정리하고 있다.
    - 긍정 표현식의 부정(is not a is b) 대신에 인라인 부정(if a is not b)을
    사용한다.
    - 길이를 확인(if len(somelist) == 0)하여 빈 값([] 또는 '')을 확인하지 않는다.
    if not somelist를 사용하고, 빈 값은 암시적으로 False가 된다고 가정한다.
    - 비어 있지 않은 값([1] 또는 'hi')에도 위와 같은 방식이 적용된다.
    값이 비어 있지 않으면 if somelist 문이 암시적으로 True가 된다.
    - 한 줄로 된 if 문, for와 while 루프, except 복합문을 쓰지 않는다. 이런 문장은
    여러 줄로 나눠서 명료하게 작성한다.
    - 항상 파일의 맨 위에 import 문을 놓는다.
    - 모듈을 임포트할 때는 항상 모듈의 절대 이름을 사용하며 현재 모듈의 경로를 기준으로
    상대 경로로 된 이름을 사용하지 않는다. 예를 들어 bar 패키지의 foo 모듈을
    임포트하려면 그냥 import foo가 아닌 from bar import foo라고 해야 한다.
    - 상대적인 임포트를 해야 한다면 명시적인 구문을 써서 from . import foo라고 한다.
    - 임포트는 '표준 라이브러리 모듈, 서드파티 모듈, 자신이 만든 모듈'섹션 순으로
    구분해야 한다. 각각의 하위 섹션에서는 알파벳 순서로 임포트한다.
"""
